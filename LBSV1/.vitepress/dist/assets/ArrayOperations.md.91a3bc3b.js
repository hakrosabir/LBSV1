import{_ as a,o as s,c as e,V as n}from"./chunks/framework.d3b95951.js";const D=JSON.parse('{"title":"Array Operations Functions","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"ArrayOperations.md","filePath":"ArrayOperations.md"}'),o={name:"ArrayOperations.md"},l=n(`<h1 id="array-operations-functions" tabindex="-1">Array Operations Functions <a class="header-anchor" href="#array-operations-functions" aria-label="Permalink to &quot;Array Operations Functions&quot;">​</a></h1><p>Array Operations Functions are a specialized set of tools designed to perform various operations on <code>Array</code> data types. While they are primarily intended to manipulate arrays, their flexibility allows them to function effectively with <code>HMIRuntime.Tags</code> as well. These utility functions offer a simple and efficient way to retrieve, analyze, and manage data stored in <code>Arrays</code> or <code>HMIRuntime.Tags</code>, making them a powerful aid in a wide range of programming tasks.</p><h2 id="getarraymaxvalue-array" tabindex="-1">getArrayMaxValue(array) <a class="header-anchor" href="#getarraymaxvalue-array" aria-label="Permalink to &quot;getArrayMaxValue(array)&quot;">​</a></h2><h3 id="description" tabindex="-1">Description <a class="header-anchor" href="#description" aria-label="Permalink to &quot;Description&quot;">​</a></h3><p>Returns the maximum value in the array.</p><h3 id="data-type" tabindex="-1">Data Type <a class="header-anchor" href="#data-type" aria-label="Permalink to &quot;Data Type&quot;">​</a></h3><p>array : <code>Array</code></p><p>return : <code>Number</code></p><h3 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// assuming myTag is an array like [1,2,3,4,5]</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> maxVal </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> LBS</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getArrayMaxValue</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">myTag</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(maxVal)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// would log maximum value from the array</span></span></code></pre></div><h4 id="return" tabindex="-1">Return <a class="header-anchor" href="#return" aria-label="Permalink to &quot;Return&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">consoleLog</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// considering [1,2,3,4,5] as the array</span></span></code></pre></div><h2 id="getarrayminvalue-array" tabindex="-1">getArrayMinValue(array) <a class="header-anchor" href="#getarrayminvalue-array" aria-label="Permalink to &quot;getArrayMinValue(array)&quot;">​</a></h2><h3 id="description-1" tabindex="-1">Description <a class="header-anchor" href="#description-1" aria-label="Permalink to &quot;Description&quot;">​</a></h3><p>Returns the minimum value in the array.</p><h3 id="data-type-1" tabindex="-1">Data Type <a class="header-anchor" href="#data-type-1" aria-label="Permalink to &quot;Data Type&quot;">​</a></h3><p>array : <code>Array</code></p><p>return : <code>Number</code></p><h3 id="example-1" tabindex="-1">Example <a class="header-anchor" href="#example-1" aria-label="Permalink to &quot;Example&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// assuming myTag is an array like [5,4,3,2,1]</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> minVal </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> LBS</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getArrayMinValue</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">myTag</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(minVal)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// would log minimum value from the array</span></span></code></pre></div><h4 id="return-1" tabindex="-1">Return <a class="header-anchor" href="#return-1" aria-label="Permalink to &quot;Return&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">consoleLog</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// considering [5,4,3,2,1] as the array</span></span></code></pre></div><h2 id="getarraylength-array" tabindex="-1">getArrayLength(array) <a class="header-anchor" href="#getarraylength-array" aria-label="Permalink to &quot;getArrayLength(array)&quot;">​</a></h2><h3 id="description-2" tabindex="-1">Description <a class="header-anchor" href="#description-2" aria-label="Permalink to &quot;Description&quot;">​</a></h3><p>Returns the length of the array. This function provides a straightforward method for determining the number of elements in an <code>Array</code> or <code>HMIRuntime.Tag</code>.</p><h3 id="data-type-2" tabindex="-1">Data Type <a class="header-anchor" href="#data-type-2" aria-label="Permalink to &quot;Data Type&quot;">​</a></h3><p>array : <code>Array</code></p><p>return : <code>Number</code></p><h3 id="example-2" tabindex="-1">Example <a class="header-anchor" href="#example-2" aria-label="Permalink to &quot;Example&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// assuming myTag is an array like [5,4,3,2,1]</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> length </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> LBS</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getArrayLength</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">myTag</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(length)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// would log the length of the array</span></span></code></pre></div><h4 id="return-2" tabindex="-1">Return <a class="header-anchor" href="#return-2" aria-label="Permalink to &quot;Return&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">consoleLog</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// considering [5,4,3,2,1] as the array</span></span></code></pre></div><h2 id="sortarray-array" tabindex="-1">sortArray(array) <a class="header-anchor" href="#sortarray-array" aria-label="Permalink to &quot;sortArray(array)&quot;">​</a></h2><h3 id="description-3" tabindex="-1">Description <a class="header-anchor" href="#description-3" aria-label="Permalink to &quot;Description&quot;">​</a></h3><p>Sorts the elements in the array in ascending order. This function is an effective way to organize data in an <code>Array</code> or <code>HMIRuntime.Tag</code>.</p><h3 id="data-type-3" tabindex="-1">Data Type <a class="header-anchor" href="#data-type-3" aria-label="Permalink to &quot;Data Type&quot;">​</a></h3><p>array : <code>Array</code></p><p>return : <code>Array</code></p><h3 id="example-3" tabindex="-1">Example <a class="header-anchor" href="#example-3" aria-label="Permalink to &quot;Example&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// assuming myTag is an array like [5,1,4,2,3]</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> sortedArray </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> LBS</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sortArray</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">myTag</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(sortedArray)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// would log the sorted array</span></span></code></pre></div><h4 id="return-3" tabindex="-1">Return <a class="header-anchor" href="#return-3" aria-label="Permalink to &quot;Return&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">consoleLog</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;">] </span><span style="color:#676E95;font-style:italic;">// considering [5,1,4,2,3] as the input array</span></span></code></pre></div><h2 id="reversesortarray-array" tabindex="-1">reverseSortArray(array) <a class="header-anchor" href="#reversesortarray-array" aria-label="Permalink to &quot;reverseSortArray(array)&quot;">​</a></h2><h3 id="description-4" tabindex="-1">Description <a class="header-anchor" href="#description-4" aria-label="Permalink to &quot;Description&quot;">​</a></h3><p>Sorts the elements in the array in descending order. This function allows to reverse the order of data in an <code>Array</code> or <code>HMIRuntime.Tag</code>, which can be useful in different scenarios.</p><h3 id="data-type-4" tabindex="-1">Data Type <a class="header-anchor" href="#data-type-4" aria-label="Permalink to &quot;Data Type&quot;">​</a></h3><p>array : <code>Array</code></p><p>return : <code>Array</code></p><h3 id="example-4" tabindex="-1">Example <a class="header-anchor" href="#example-4" aria-label="Permalink to &quot;Example&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// assuming myTag is an array like [1,3,2,5,4]</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> reversedSortedArray </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> LBS</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">reverseSortArray</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">myTag</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(reversedSortedArray)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// would log the array sorted in reverse order</span></span></code></pre></div><h4 id="return-4" tabindex="-1">Return <a class="header-anchor" href="#return-4" aria-label="Permalink to &quot;Return&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">consoleLog</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">] </span><span style="color:#676E95;font-style:italic;">// considering [1,3,2,5,4] as the input array</span></span></code></pre></div><h2 id="removearrayvaluebyindex-array-index" tabindex="-1">removeArrayValueByIndex(array, index) <a class="header-anchor" href="#removearrayvaluebyindex-array-index" aria-label="Permalink to &quot;removeArrayValueByIndex(array, index)&quot;">​</a></h2><h3 id="description-5" tabindex="-1">Description <a class="header-anchor" href="#description-5" aria-label="Permalink to &quot;Description&quot;">​</a></h3><p>Removes an element from the array at a specified index. This function enables precise control over the contents of an <code>Array</code> or <code>HMIRuntime.Tag</code> by allowing specific elements to be removed.</p><h3 id="data-type-5" tabindex="-1">Data Type <a class="header-anchor" href="#data-type-5" aria-label="Permalink to &quot;Data Type&quot;">​</a></h3><p>array : <code>Array</code></p><p>index : <code>Number</code></p><p>return : <code>Array</code></p><h3 id="example-5" tabindex="-1">Example <a class="header-anchor" href="#example-5" aria-label="Permalink to &quot;Example&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// assuming myTag is an array like [1,2,3,4,5]</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> updatedArray </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> LBS</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">removeArrayValueByIndex</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">myTag</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// removing element at index 2</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(updatedArray)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// would log the updated array</span></span></code></pre></div><h4 id="return-5" tabindex="-1">Return <a class="header-anchor" href="#return-5" aria-label="Permalink to &quot;Return&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">consoleLog</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;">] </span><span style="color:#676E95;font-style:italic;">// considering [1,2,3,4,5] as the input array and 2 as the index</span></span></code></pre></div><h2 id="insertarrayvalueatindex-array-index-value" tabindex="-1">insertArrayValueAtIndex(array, index, value) <a class="header-anchor" href="#insertarrayvalueatindex-array-index-value" aria-label="Permalink to &quot;insertArrayValueAtIndex(array, index, value)&quot;">​</a></h2><h3 id="description-6" tabindex="-1">Description <a class="header-anchor" href="#description-6" aria-label="Permalink to &quot;Description&quot;">​</a></h3><p>Inserts a value into the array at the specified index. This function is an efficient method for adding new elements to an <code>Array</code> or <code>HMIRuntime.Tag</code> at any given position.</p><h3 id="data-type-6" tabindex="-1">Data Type <a class="header-anchor" href="#data-type-6" aria-label="Permalink to &quot;Data Type&quot;">​</a></h3><p>array : <code>Array</code></p><p>index : <code>Number</code></p><p>value : <code>Any</code></p><p>return : <code>Array</code></p><h3 id="example-6" tabindex="-1">Example <a class="header-anchor" href="#example-6" aria-label="Permalink to &quot;Example&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// assuming myTag is an array like [1,2,4,5]</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> updatedArray </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> LBS</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">insertArrayValueAtIndex</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">myTag</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// inserting value 3 at index 2</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(updatedArray)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// would log the updated array</span></span></code></pre></div><h4 id="return-6" tabindex="-1">Return <a class="header-anchor" href="#return-6" aria-label="Permalink to &quot;Return&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">consoleLog</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;">] </span><span style="color:#676E95;font-style:italic;">// considering [1,2,4,5] as the input array, 2 as the index and 3 as the value</span></span></code></pre></div><h2 id="arrayhasduplicates-array" tabindex="-1">ArrayHasDuplicates(array) <a class="header-anchor" href="#arrayhasduplicates-array" aria-label="Permalink to &quot;ArrayHasDuplicates(array)&quot;">​</a></h2><h3 id="description-7" tabindex="-1">Description <a class="header-anchor" href="#description-7" aria-label="Permalink to &quot;Description&quot;">​</a></h3><p>Checks if the array has duplicate values. This function is a quick and efficient way to assess the uniqueness of the elements in an <code>Array</code> or <code>HMIRuntime.Tag</code>.</p><h3 id="data-type-7" tabindex="-1">Data Type <a class="header-anchor" href="#data-type-7" aria-label="Permalink to &quot;Data Type&quot;">​</a></h3><p>array : <code>Array</code></p><p>return : <code>Boolean</code></p><h3 id="example-7" tabindex="-1">Example <a class="header-anchor" href="#example-7" aria-label="Permalink to &quot;Example&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// assuming myTag is an array like [1,2,3,2,5]</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> hasDuplicates </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> LBS</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ArrayHasDuplicates</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">myTag</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(hasDuplicates)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// would log whether the array has duplicates or not</span></span></code></pre></div><h4 id="return-7" tabindex="-1">Return <a class="header-anchor" href="#return-7" aria-label="Permalink to &quot;Return&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">consoleLog</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// considering [1,2,3,2,5] as the input array</span></span></code></pre></div><h2 id="arrayuniquevalues-array" tabindex="-1">ArrayUniqueValues(array) <a class="header-anchor" href="#arrayuniquevalues-array" aria-label="Permalink to &quot;ArrayUniqueValues(array)&quot;">​</a></h2><h3 id="description-8" tabindex="-1">Description <a class="header-anchor" href="#description-8" aria-label="Permalink to &quot;Description&quot;">​</a></h3><p>Returns an array of unique values from the input array. This function simplifies the process of identifying and collecting unique elements from an <code>Array</code> or <code>HMIRuntime.Tag</code>.</p><h3 id="data-type-8" tabindex="-1">Data Type <a class="header-anchor" href="#data-type-8" aria-label="Permalink to &quot;Data Type&quot;">​</a></h3><p>array : <code>Array</code></p><p>return : <code>Array</code></p><h3 id="example-8" tabindex="-1">Example <a class="header-anchor" href="#example-8" aria-label="Permalink to &quot;Example&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// assuming myTag is an array like [1,2,3,2,5]</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> uniqueValuesArray </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> LBS</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ArrayUniqueValues</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">myTag</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(uniqueValuesArray)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// would log the array of unique values</span></span></code></pre></div><h4 id="return-8" tabindex="-1">Return <a class="header-anchor" href="#return-8" aria-label="Permalink to &quot;Return&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">consoleLog</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;">] </span><span style="color:#676E95;font-style:italic;">// considering [1,2,3,2,5] as the input array</span></span></code></pre></div><h2 id="concatenatearrays-array1-array2" tabindex="-1">concatenateArrays(array1, array2) <a class="header-anchor" href="#concatenatearrays-array1-array2" aria-label="Permalink to &quot;concatenateArrays(array1, array2)&quot;">​</a></h2><h3 id="description-9" tabindex="-1">Description <a class="header-anchor" href="#description-9" aria-label="Permalink to &quot;Description&quot;">​</a></h3><p>Concatenates two arrays. This function offers a straightforward way to merge two <code>Array</code> or <code>HMIRuntime.Tag</code> elements into a single array.</p><h3 id="data-type-9" tabindex="-1">Data Type <a class="header-anchor" href="#data-type-9" aria-label="Permalink to &quot;Data Type&quot;">​</a></h3><p>array1 : <code>Array</code></p><p>array2 : <code>Array</code></p><p>return : <code>Array</code></p><h3 id="example-9" tabindex="-1">Example <a class="header-anchor" href="#example-9" aria-label="Permalink to &quot;Example&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// assuming myTag1 is an array like [1,2,3] and myTag2 is an array like [4,5,6]</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> concatenatedArray </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> LBS</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">concatenateArrays</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">myTag1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">myTag2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(concatenatedArray)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// would log the concatenated array</span></span></code></pre></div><h4 id="return-9" tabindex="-1">Return <a class="header-anchor" href="#return-9" aria-label="Permalink to &quot;Return&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">consoleLog</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">6</span><span style="color:#A6ACCD;">] </span><span style="color:#676E95;font-style:italic;">// considering [1,2,3] and [4,5,6] as the input arrays</span></span></code></pre></div><h2 id="comparearrays-array1-array2" tabindex="-1">compareArrays(array1, array2) <a class="header-anchor" href="#comparearrays-array1-array2" aria-label="Permalink to &quot;compareArrays(array1, array2)&quot;">​</a></h2><h3 id="description-10" tabindex="-1">Description <a class="header-anchor" href="#description-10" aria-label="Permalink to &quot;Description&quot;">​</a></h3><p>Compares two arrays for equality. This function is a reliable tool to determine if two <code>Array</code> or <code>HMIRuntime.Tag</code> elements contain exactly the same elements in the same order.</p><h3 id="data-type-10" tabindex="-1">Data Type <a class="header-anchor" href="#data-type-10" aria-label="Permalink to &quot;Data Type&quot;">​</a></h3><p>array1 : <code>Array</code></p><p>array2 : <code>Array</code></p><p>return : <code>Boolean</code></p><h3 id="example-10" tabindex="-1">Example <a class="header-anchor" href="#example-10" aria-label="Permalink to &quot;Example&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// assuming myTag1 is an array like [1,2,3] and myTag2 is an array like [1,2,3]</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> arraysAreEqual </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> LBS</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">compareArrays</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">myTag1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">myTag2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(arraysAreEqual)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// would log whether the arrays are equal or not</span></span></code></pre></div><h4 id="return-10" tabindex="-1">Return <a class="header-anchor" href="#return-10" aria-label="Permalink to &quot;Return&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">consoleLog</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// considering [1,2,3] and [1,2,3] as the input arrays</span></span></code></pre></div><h2 id="getarraycountoccurrences-array-value" tabindex="-1">getArrayCountOccurrences(array, value) <a class="header-anchor" href="#getarraycountoccurrences-array-value" aria-label="Permalink to &quot;getArrayCountOccurrences(array, value)&quot;">​</a></h2><h3 id="description-11" tabindex="-1">Description <a class="header-anchor" href="#description-11" aria-label="Permalink to &quot;Description&quot;">​</a></h3><p>Counts the number of occurrences of a value in the array. This function provides a simple way to analyze the frequency of specific elements in an <code>Array</code> or <code>HMIRuntime.Tag</code>.</p><h3 id="data-type-11" tabindex="-1">Data Type <a class="header-anchor" href="#data-type-11" aria-label="Permalink to &quot;Data Type&quot;">​</a></h3><p>array : <code>Array</code> value : <code>Any</code></p><p>return : <code>Number</code></p><h3 id="example-11" tabindex="-1">Example <a class="header-anchor" href="#example-11" aria-label="Permalink to &quot;Example&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// assuming myTag is an array like [1,2,3,2,5,2]</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> countOccurrences </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> LBS</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getArrayCountOccurrences</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">myTag</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// count occurrences of 2</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(countOccurrences)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// would log the number of occurrences</span></span></code></pre></div><h4 id="return-11" tabindex="-1">Return <a class="header-anchor" href="#return-11" aria-label="Permalink to &quot;Return&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">consoleLog</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// considering [1,2,3,2,5,2] as the input array and 2 as the value</span></span></code></pre></div><h2 id="shufflearray-array" tabindex="-1">shuffleArray(array) <a class="header-anchor" href="#shufflearray-array" aria-label="Permalink to &quot;shuffleArray(array)&quot;">​</a></h2><h3 id="description-12" tabindex="-1">Description <a class="header-anchor" href="#description-12" aria-label="Permalink to &quot;Description&quot;">​</a></h3><p>Shuffles the elements of the array. This function randomizes the order of elements in an <code>Array</code> or <code>HMIRuntime.Tag</code>, making it useful in scenarios where randomness is required.</p><h3 id="data-type-12" tabindex="-1">Data Type <a class="header-anchor" href="#data-type-12" aria-label="Permalink to &quot;Data Type&quot;">​</a></h3><p>array : <code>Array</code></p><p>return : <code>Array</code></p><h3 id="example-12" tabindex="-1">Example <a class="header-anchor" href="#example-12" aria-label="Permalink to &quot;Example&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// assuming myTag is an array like [1,2,3,4,5]</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> shuffledArray </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> LBS</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">shuffleArray</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">myTag</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(shuffledArray)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// would log the shuffled array</span></span></code></pre></div><h4 id="return-12" tabindex="-1">Return <a class="header-anchor" href="#return-12" aria-label="Permalink to &quot;Return&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// The output will be a permutation of the input array, such as [3,1,2,5,4] or [5,2,1,4,3], etc.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Due to the random nature of the shuffle, the output can vary on each execution.</span></span></code></pre></div><h2 id="findarrayvalue-array-value" tabindex="-1">findArrayValue(array, value) <a class="header-anchor" href="#findarrayvalue-array-value" aria-label="Permalink to &quot;findArrayValue(array, value)&quot;">​</a></h2><h3 id="description-13" tabindex="-1">Description <a class="header-anchor" href="#description-13" aria-label="Permalink to &quot;Description&quot;">​</a></h3><p>Checks if a value exists in the array. This function offers a simple way to verify the presence of a specific element in an <code>Array</code> or <code>HMIRuntime.Tag</code>.</p><h3 id="data-type-13" tabindex="-1">Data Type <a class="header-anchor" href="#data-type-13" aria-label="Permalink to &quot;Data Type&quot;">​</a></h3><p>array : <code>Array</code></p><p>value : <code>Any</code></p><p>return : <code>Boolean</code></p><h3 id="example-13" tabindex="-1">Example <a class="header-anchor" href="#example-13" aria-label="Permalink to &quot;Example&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// assuming myTag is an array like [1,2,3,4,5]</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> valueExists </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> LBS</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">findArrayValue</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">myTag</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// checking if 3 exists in the array</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(valueExists)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// would log whether the value exists or not</span></span></code></pre></div><h4 id="return-13" tabindex="-1">Return <a class="header-anchor" href="#return-13" aria-label="Permalink to &quot;Return&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">consoleLog</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// considering [1,2,3,4,5] as the input array and 3 as the value</span></span></code></pre></div><h2 id="findarrayvalueindex-array-value" tabindex="-1">findArrayValueIndex(array, value) <a class="header-anchor" href="#findarrayvalueindex-array-value" aria-label="Permalink to &quot;findArrayValueIndex(array, value)&quot;">​</a></h2><h3 id="description-14" tabindex="-1">Description <a class="header-anchor" href="#description-14" aria-label="Permalink to &quot;Description&quot;">​</a></h3><p>Finds the index of a value in the array. This function helps in identifying the position of a specific element in an <code>Array</code> or <code>HMIRuntime.Tag</code>.</p><h3 id="data-type-14" tabindex="-1">Data Type <a class="header-anchor" href="#data-type-14" aria-label="Permalink to &quot;Data Type&quot;">​</a></h3><p>array : <code>Array</code></p><p>value : <code>Any</code></p><p>return : <code>Number</code></p><h3 id="example-14" tabindex="-1">Example <a class="header-anchor" href="#example-14" aria-label="Permalink to &quot;Example&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// assuming myTag is an array like [1,2,3,4,5]</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> valueIndex </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> LBS</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">findArrayValueIndex</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">myTag</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// finding the index of 3</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(valueIndex)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// would log the index of the value</span></span></code></pre></div><h4 id="return-14" tabindex="-1">Return <a class="header-anchor" href="#return-14" aria-label="Permalink to &quot;Return&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">consoleLog</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// considering [1,2,3,4,5] as the input array and 3 as the value</span></span></code></pre></div><h2 id="removearrayvalue-array-value" tabindex="-1">removeArrayValue(array, value) <a class="header-anchor" href="#removearrayvalue-array-value" aria-label="Permalink to &quot;removeArrayValue(array, value)&quot;">​</a></h2><h3 id="description-15" tabindex="-1">Description <a class="header-anchor" href="#description-15" aria-label="Permalink to &quot;Description&quot;">​</a></h3><p>Removes a specific value from the array. This function allows for targeted removal of a single occurrence of a specific element in an <code>Array</code> or <code>HMIRuntime.Tag</code>.</p><h3 id="data-type-15" tabindex="-1">Data Type <a class="header-anchor" href="#data-type-15" aria-label="Permalink to &quot;Data Type&quot;">​</a></h3><p>array : <code>Array</code></p><p>value : <code>Any</code></p><p>return : <code>Array</code></p><h3 id="example-15" tabindex="-1">Example <a class="header-anchor" href="#example-15" aria-label="Permalink to &quot;Example&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// assuming myTag is an array like [1,2,3,2,5,2]</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> updatedArray </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> LBS</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">removeArrayValue</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">myTag</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// removing first occurrence of 2</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(updatedArray)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// would log the updated array</span></span></code></pre></div><h4 id="return-15" tabindex="-1">Return <a class="header-anchor" href="#return-15" aria-label="Permalink to &quot;Return&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">consoleLog</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">] </span><span style="color:#676E95;font-style:italic;">// considering [1,2,3,2,5,2] as the input array and 2 as the value</span></span></code></pre></div><h2 id="removearrayvalues-array-value" tabindex="-1">removeArrayValues(array, value) <a class="header-anchor" href="#removearrayvalues-array-value" aria-label="Permalink to &quot;removeArrayValues(array, value)&quot;">​</a></h2><h3 id="description-16" tabindex="-1">Description <a class="header-anchor" href="#description-16" aria-label="Permalink to &quot;Description&quot;">​</a></h3><p>Removes all occurrences of a specific value from the array. This function is effective for cleaning an <code>Array</code> or <code>HMIRuntime.Tag</code> of all instances of a specific element.</p><h3 id="data-type-16" tabindex="-1">Data Type <a class="header-anchor" href="#data-type-16" aria-label="Permalink to &quot;Data Type&quot;">​</a></h3><p>array : <code>Array</code></p><p>value : <code>Any</code></p><p>return : <code>Array</code></p><h3 id="example-16" tabindex="-1">Example <a class="header-anchor" href="#example-16" aria-label="Permalink to &quot;Example&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// assuming myTag is an array like [1,2,3,2,5,2]</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> updatedArray </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> LBS</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">removeArrayValues</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">myTag</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// removing all occurrences of 2</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(updatedArray)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// would log the updated array</span></span></code></pre></div><h4 id="return-16" tabindex="-1">Return <a class="header-anchor" href="#return-16" aria-label="Permalink to &quot;Return&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">consoleLog</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;">] </span><span style="color:#676E95;font-style:italic;">// considering [1,2,3,2,5,2] as the input array and 2 as the value</span></span></code></pre></div><h2 id="arraydifference-array1-array2" tabindex="-1">arrayDifference(array1, array2) <a class="header-anchor" href="#arraydifference-array1-array2" aria-label="Permalink to &quot;arrayDifference(array1, array2)&quot;">​</a></h2><h3 id="description-17" tabindex="-1">Description <a class="header-anchor" href="#description-17" aria-label="Permalink to &quot;Description&quot;">​</a></h3><p>Returns the difference between two arrays. This function is useful for identifying elements that are present in one <code>Array</code> or <code>HMIRuntime.Tag</code> but not in another.</p><h3 id="data-type-17" tabindex="-1">Data Type <a class="header-anchor" href="#data-type-17" aria-label="Permalink to &quot;Data Type&quot;">​</a></h3><p>array1 : <code>Array</code></p><p>array2 : <code>Array</code></p><p>return : <code>Array</code></p><h3 id="example-17" tabindex="-1">Example <a class="header-anchor" href="#example-17" aria-label="Permalink to &quot;Example&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-diff"><code><span class="line"><span style="color:#676E95;font-style:italic;">// assuming myTag1 is an array like [1,2,3,4,5] and myTag2 is an array like [4,5,6]</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> differenceArray </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> LBS</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">arrayDifference</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">myTag1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">myTag2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// getting the difference between the arrays</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(differenceArray)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// would log the difference array</span></span></code></pre></div><h4 id="return-17" tabindex="-1">Return <a class="header-anchor" href="#return-17" aria-label="Permalink to &quot;Return&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">consoleLog</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">] </span><span style="color:#676E95;font-style:italic;">// considering [1,2,3,4,5] and [4,5,6] as the input arrays</span></span></code></pre></div><h2 id="arraysum-array1-array2" tabindex="-1">arraySum(array1, array2) <a class="header-anchor" href="#arraysum-array1-array2" aria-label="Permalink to &quot;arraySum(array1, array2)&quot;">​</a></h2><h3 id="description-18" tabindex="-1">Description <a class="header-anchor" href="#description-18" aria-label="Permalink to &quot;Description&quot;">​</a></h3><p>Sums the elements of two arrays. This function offers a quick way to combine the elements of two <code>Array</code> or <code>HMIRuntime.Tag</code> elements in a pairwise manner.</p><h3 id="data-type-18" tabindex="-1">Data Type <a class="header-anchor" href="#data-type-18" aria-label="Permalink to &quot;Data Type&quot;">​</a></h3><p>array1 : <code>Array</code></p><p>array2 : <code>Array</code></p><p>return : <code>Array</code></p><h3 id="example-18" tabindex="-1">Example <a class="header-anchor" href="#example-18" aria-label="Permalink to &quot;Example&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// assuming myTag1 is an array like [1,2,3] and myTag2 is an array like [4,5,6]</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> sumArray </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> LBS</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">arraySum</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">myTag1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">myTag2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// summing the arrays</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(sumArray)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// would log the summed array</span></span></code></pre></div><h4 id="return-18" tabindex="-1">Return <a class="header-anchor" href="#return-18" aria-label="Permalink to &quot;Return&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">consoleLog</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">7</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">9</span><span style="color:#A6ACCD;">] </span><span style="color:#676E95;font-style:italic;">// considering [1,2,3] and [4,5,6] as the input arrays</span></span></code></pre></div><h2 id="getarraysum-array" tabindex="-1">getArraySum(array) <a class="header-anchor" href="#getarraysum-array" aria-label="Permalink to &quot;getArraySum(array)&quot;">​</a></h2><h3 id="description-19" tabindex="-1">Description <a class="header-anchor" href="#description-19" aria-label="Permalink to &quot;Description&quot;">​</a></h3><p>Returns the sum of the elements in the array. This function allows for easy computation of the total sum of all elements in an <code>Array</code> or <code>HMIRuntime.Tag</code>.</p><h3 id="data-type-19" tabindex="-1">Data Type <a class="header-anchor" href="#data-type-19" aria-label="Permalink to &quot;Data Type&quot;">​</a></h3><p>array : <code>Array</code></p><p>return : <code>Number</code></p><h3 id="example-19" tabindex="-1">Example <a class="header-anchor" href="#example-19" aria-label="Permalink to &quot;Example&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// assuming myTag is an array like [1,2,3,4,5]</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> totalSum </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> LBS</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getArraySum</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">myTag</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// getting the total sum</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(totalSum)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// would log the total sum</span></span></code></pre></div><h4 id="return-19" tabindex="-1">Return <a class="header-anchor" href="#return-19" aria-label="Permalink to &quot;Return&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">consoleLog</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">15</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// considering [1,2,3,4,5] as the input array</span></span></code></pre></div><h2 id="getarrayaverage-array" tabindex="-1">getArrayAverage(array) <a class="header-anchor" href="#getarrayaverage-array" aria-label="Permalink to &quot;getArrayAverage(array)&quot;">​</a></h2><h3 id="description-20" tabindex="-1">Description <a class="header-anchor" href="#description-20" aria-label="Permalink to &quot;Description&quot;">​</a></h3><p>Returns the average of the elements in the array. This function provides a convenient way to calculate the mean value of the elements in an <code>Array</code> or <code>HMIRuntime.Tag</code>.</p><h3 id="data-type-20" tabindex="-1">Data Type <a class="header-anchor" href="#data-type-20" aria-label="Permalink to &quot;Data Type&quot;">​</a></h3><p>array : <code>Array</code></p><p>return : <code>Number</code></p><h3 id="example-20" tabindex="-1">Example <a class="header-anchor" href="#example-20" aria-label="Permalink to &quot;Example&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// assuming myTag is an array like [1,2,3,4,5]</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> averageValue </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> LBS</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getArrayAverage</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">myTag</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// getting the average value</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(averageValue)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// would log the average value</span></span></code></pre></div><h4 id="return-20" tabindex="-1">Return <a class="header-anchor" href="#return-20" aria-label="Permalink to &quot;Return&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">consoleLog</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// considering [1,2,3,4,5] as the input array</span></span></code></pre></div><h2 id="pushtotagarray-tagname-array" tabindex="-1">pushToTagArray(tagName, array) <a class="header-anchor" href="#pushtotagarray-tagname-array" aria-label="Permalink to &quot;pushToTagArray(tagName, array)&quot;">​</a></h2><h3 id="description-21" tabindex="-1">Description <a class="header-anchor" href="#description-21" aria-label="Permalink to &quot;Description&quot;">​</a></h3><p>Pushes elements to a tag array. This function allows you to append elements from a source <code>Array</code> to a <code>HMIRuntime.Tag</code>, extending its length.</p><h3 id="data-type-21" tabindex="-1">Data Type <a class="header-anchor" href="#data-type-21" aria-label="Permalink to &quot;Data Type&quot;">​</a></h3><p>tagName : <code>String</code></p><p>array : <code>Array</code></p><p>return : <code>Void</code></p><h3 id="example-21" tabindex="-1">Example <a class="header-anchor" href="#example-21" aria-label="Permalink to &quot;Example&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// assuming myTag is a tag array like [1,2,3] and myArray is an array like [4,5,6]</span></span>
<span class="line"><span style="color:#A6ACCD;">LBS</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">pushToTagArray</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">myTag</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> myArray)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// pushing elements to the tag array</span></span></code></pre></div><h2 id="populatetagarray-tagname-array" tabindex="-1">populateTagArray(tagName, array) <a class="header-anchor" href="#populatetagarray-tagname-array" aria-label="Permalink to &quot;populateTagArray(tagName, array)&quot;">​</a></h2><h3 id="description-22" tabindex="-1">Description <a class="header-anchor" href="#description-22" aria-label="Permalink to &quot;Description&quot;">​</a></h3><p>Populates a tag array with values from another array. This function allows you to replace the contents of a <code>HMIRuntime.Tag</code> with the elements from a source <code>Array</code>.</p><h3 id="data-type-22" tabindex="-1">Data Type <a class="header-anchor" href="#data-type-22" aria-label="Permalink to &quot;Data Type&quot;">​</a></h3><p>tagName : <code>String</code> array : <code>Array</code></p><p>return : <code>Void</code></p><h3 id="example-22" tabindex="-1">Example <a class="header-anchor" href="#example-22" aria-label="Permalink to &quot;Example&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// assuming myTag is a tag array and myArray is an array like [1,2,3]</span></span>
<span class="line"><span style="color:#A6ACCD;">LBS</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">populateTagArray</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">myTag</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> myArray)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// populating the tag array</span></span></code></pre></div><h2 id="getarrayfromtags-array" tabindex="-1">getArrayFromTags(array) <a class="header-anchor" href="#getarrayfromtags-array" aria-label="Permalink to &quot;getArrayFromTags(array)&quot;">​</a></h2><h3 id="description-23" tabindex="-1">Description <a class="header-anchor" href="#description-23" aria-label="Permalink to &quot;Description&quot;">​</a></h3><p>Fetches an array from tags. This function retrieves the contents of a <code>HMIRuntime.Tag</code> and returns them as an <code>Array</code>.</p><h3 id="data-type-23" tabindex="-1">Data Type <a class="header-anchor" href="#data-type-23" aria-label="Permalink to &quot;Data Type&quot;">​</a></h3><p>array : <code>Array of String</code></p><p>return : <code>Array</code></p><h3 id="example-23" tabindex="-1">Example <a class="header-anchor" href="#example-23" aria-label="Permalink to &quot;Example&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// assuming myTags is an array of tag names like [&#39;tag1&#39;, &#39;tag2&#39;, &#39;tag3&#39;]</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> valuesArray </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> LBS</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getArrayFromTags</span><span style="color:#A6ACCD;">(myTags)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// fetching array from tags</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(valuesArray)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// would log the fetched array</span></span></code></pre></div><h4 id="return-21" tabindex="-1">Return <a class="header-anchor" href="#return-21" aria-label="Permalink to &quot;Return&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// The output will be an array of values from the tags. </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// The exact values will depend on the current values stored in the tags.</span></span></code></pre></div>`,250),r=[l];function t(p,c,i,y,d,u){return s(),e("div",null,r)}const A=a(o,[["render",t]]);export{D as __pageData,A as default};
